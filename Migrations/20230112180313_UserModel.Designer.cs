// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using recipe_server;

#nullable disable

namespace recipeserver.Migrations
{
    [DbContext(typeof(DataC))]
    [Migration("20230112180313_UserModel")]
    partial class UserModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("recipe_server.Models.Dietary", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<bool>("bulking")
                        .HasColumnType("bit");

                    b.Property<bool>("cutting")
                        .HasColumnType("bit");

                    b.Property<bool>("dairyFree")
                        .HasColumnType("bit");

                    b.Property<bool>("glutenFree")
                        .HasColumnType("bit");

                    b.Property<bool>("vegan")
                        .HasColumnType("bit");

                    b.Property<bool>("vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("RecipeId")
                        .IsUnique();

                    b.ToTable("Dietaries");
                });

            modelBuilder.Entity("recipe_server.Models.Ingredient", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("recipe_server.Models.NutritionalInformation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Calories")
                        .HasColumnType("int");

                    b.Property<string>("Carbohydrates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fiber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protein")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("ServingSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sodium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sugar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("NutritionalInformation");
                });

            modelBuilder.Entity("recipe_server.Models.Recipe", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int?>("Userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("Userid");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("recipe_server.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("recipe_server.Models.Dietary", b =>
                {
                    b.HasOne("recipe_server.Models.Recipe", null)
                        .WithOne("dietary")
                        .HasForeignKey("recipe_server.Models.Dietary", "RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("recipe_server.Models.Ingredient", b =>
                {
                    b.HasOne("recipe_server.Models.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("recipe_server.Models.Recipe", b =>
                {
                    b.HasOne("recipe_server.Models.NutritionalInformation", "NutritionalInformation")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("recipe_server.Models.User", null)
                        .WithMany("Favourites")
                        .HasForeignKey("Userid");

                    b.Navigation("NutritionalInformation");
                });

            modelBuilder.Entity("recipe_server.Models.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("dietary");
                });

            modelBuilder.Entity("recipe_server.Models.User", b =>
                {
                    b.Navigation("Favourites");
                });
#pragma warning restore 612, 618
        }
    }
}
